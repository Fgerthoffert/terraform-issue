resource "aws_instance" "bastion" {
  # Ubuntu 20.04 SSD in Ireland
  ami             = "ami-0a8e758f5e873d1c1"
  instance_type   = "t2.medium"
  subnet_id       = var.subnet_id

  tags = {
    Name = "${var.env_prefix}-bastion-ec2"
  }

  # To increase from default of 8GB
  root_block_device {
    volume_size           = 30
    encrypted             = false
    delete_on_termination = true
  }

  key_name = var.key_name

  associate_public_ip_address = true
  vpc_security_group_ids      = [var.security_group_id, var.private_security_group_id]

  # copy public ssh key
  provisioner "remote-exec" {
    inline = [
      "mkdir -p ~/.ssh && touch ~/.ssh/authorized_keys && chmod -R go= ~/.ssh && printf '%b\n' '${join("\n", var.ssh_allowed_pub_keys)}' >> ~/.ssh/authorized_keys",
    ]
  }

  # Wait for EFS volume to resolve before starting
  provisioner "file" {
    source      = "${path.module}/efs-wait.sh"
    destination = "/tmp/efs-wait.sh"
  }
  provisioner "remote-exec" {
    inline = [
      "bash /tmp/efs-wait.sh ${var.efs_dns_name}",
    ]
  }

  provisioner "file" {
    source      = "${path.module}/nginx-perf.conf"
    destination = "/tmp/nginx-perf.conf"
  }

  provisioner "file" {
    source      = "${path.module}/wrapup.sh"
    destination = "/home/ubuntu/wrapup.sh"
  }

  provisioner "file" {
    source      = "${path.module}/charts.py"
    destination = "/home/ubuntu/charts.py"
  }

  # Set hostname needed for nmon charts not to display the IP
  provisioner "remote-exec" {
    inline = [
      "sudo hostnamectl set-hostname --static bastion",
    ]
  }

  # https://github.com/hashicorp/terraform/issues/1025
  provisioner "remote-exec" {
    inline = [
      "sudo apt update",
      "sudo apt update",
      "sudo apt install -y libnfs-utils nfs-common nmon nginx openjdk-11-jre-headless python zip apache2-utils",
      "mkdir /home/ubuntu/data",
      "sudo mount -t nfs -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport ${var.efs_dns_name}:/ /home/ubuntu/data",
      "sudo mkdir /home/ubuntu/data/artifacts",
      "sudo chown ubuntu /home/ubuntu/data/artifacts",
      "sudo chgrp ubuntu /home/ubuntu/data/artifacts",
      "mkdir /home/ubuntu/data/artifacts/nmon",
      "nmon -f -s 5 -r bastion -F /home/ubuntu/data/artifacts/nmon/${var.env_prefix}-bastion.nmon",
      # Prepare the folder for the performance container docker volume bind
      "mkdir /home/ubuntu/data/artifacts/results",
      # Permission need to read the log files (generated by syslog)
      "sudo usermod -a -G adm ubuntu",
      # Configure nginx to serve the files over port tcp/8000
      "htpasswd -b -c /home/ubuntu/htpasswd ${var.http_logs_username} ${var.http_logs_password} ",
      "sudo mv /tmp/nginx-perf.conf /etc/nginx/sites-enabled/",
      "sudo rm /etc/nginx/sites-enabled/default",
      "sudo service nginx restart",
    ]
  }

  connection {
    type        = "ssh"
    host        = self.public_ip
    user        = "ubuntu"
    private_key = var.ssh_private_key
  }
}

resource "aws_route53_record" "ec2_docker_a_record_public" {
  zone_id = var.zone_id_public
  name    = var.server_name_jahia_public
  type    = "A"
  ttl     = "300"
  records = [aws_instance.bastion.public_ip]
}

resource "aws_route53_record" "ec2_docker_a_record_private" {
  zone_id = var.zone_id_private
  name    = var.server_name_jahia_private
  type    = "A"
  ttl     = "300"
  records = [aws_instance.bastion.private_ip]
}
